//compilation javacc MiniJavaLexer.jj

options {
  JAVA_UNICODE_ESCAPE = true;
}

PARSER_BEGIN(MiniJavaParser)
  public class MiniJavaParser {}
PARSER_END(MiniJavaParser)

/* The regular expressions here will be skipped during lexical analysis: */
SKIP : {
	<"//" (<DIGIT> | <LETTER> | " ")* ("\n" | "\r" | "\r\n")>
	|<"/*" (<DIGIT> | <LETTER> | (" " | "\n" | "\r" | "\r\n"))* "*/">
	| " "
	| "\t"
	| "\n"
}

// Insert a specification of a lexical analysis here. 
TOKEN : {
        <CLASS: "class">
        |<IF: "if">
        |<INT: "int">
        |<NEW: "new">
        |<VOID: "void">
        |<ELSE: "else">
        |<TRUE: "true">
        |<MAIN: "main">
        |<THIS: "this">
        |<WHILE: "while">
        |<FALSE: "false">
        |<PUBLIC: "public">
        |<STATIC: "static">
        |<STRING: "String">
        |<LENGTH: "length">
        |<RETURN: "return">
        |<BOOLEAN: "boolean">
        |<EXTENDS: "extends">
        |< #DIGIT: ["0"-"9"] >
	|< #LETTER: ["A"-"Z"] | ["a"-"z"] >
	| < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT> | "_")* >
	| < INTEGER_LITERAL: (<DIGIT>)+ >
}



// The following is a simple grammar that will allow you
// to test the generated lexer.
/*
void Goal() :
{}
{
  ( MiniJavaToken() )*
  <EOF>
}

void MiniJavaToken():
{}
{
  "class"  |  <IDENTIFIER> | "{" | "public" | "static" | "void" |
  "main" | "(" | "String"  | "[" | "]" | ")" | "}" | "extends" | ";"
  | "return" | "," | "int" | "boolean" | "=" | "if" | "else" | "while"
  | "System.out.println" | "&&" | "<" | "+" | "-" | "*" | "." |
  "length" | <INTEGER_LITERAL> | "true" | "false" | "this" | "new" |
  "!"
}
*/
//adding parser
void Program() :
{}
{
    MainClass() (ClassDecl())*
  <EOF>
}

//rule for main class
void MainClass() :
{}
{
    <CLASS> <IDENTIFIER> "{" "public" "static" "void" "main" "(" "String" "[" "]" <IDENTIFIER> ")"
    "{" (LOOKAHEAD(2) VarDecl())* (Statement())* "}" "}"
}

//rule for class other than main
void ClassDecl():
{}
{
    LOOKAHEAD(3)
    "class" <IDENTIFIER> "{" (VarDecl())* (MethodDecl())* "}"
    | "class" <IDENTIFIER> "extends" <IDENTIFIER> "{" (VarDecl())* (MethodDecl())* "}"
}

void VarDecl():
{}
{
    Type() <IDENTIFIER> ";"
}

void MethodDecl():
{}
{
    "public" Type() <IDENTIFIER> "(" FormalList() ")"
    "{" (LOOKAHEAD(2) VarDecl())* (Statement())* "return" Exp() ";" "}"
}

void FormalList():
{}
{
    ( Type() <IDENTIFIER> (FormalRest())* )?
}

void FormalRest():
{}
{
    "," Type() <IDENTIFIER>
}

void Type():
{}
{
     LOOKAHEAD(2) "int" "[" "]"
    | "boolean"
    | "int"
    | <IDENTIFIER>
}

void Statement():
{}
{
    "{" (Statement())* "}"
    | "if" "(" Exp() ")" Statement() "else" Statement()
    | "while" "(" Exp() ")" Statement()
    | "System.out.println" "(" Exp() ")" ";"
    | LOOKAHEAD(2)
      <IDENTIFIER> "=" Exp() ";"
    | <IDENTIFIER> "[" Exp() "]" "=" Exp() ";"
}

void Exp():
{}
{
    LOOKAHEAD(2)
    <INTEGER_LITERAL> "+" <INTEGER_LITERAL>
    | LOOKAHEAD(2) 
      <IDENTIFIER> "[" Exp() "]"
    | LOOKAHEAD(3)
      <IDENTIFIER> "." "length"
    | LOOKAHEAD(3)
      <IDENTIFIER> "." <IDENTIFIER> "(" ExpList() ")"
    | <INTEGER_LITERAL>
    | "true"
    | "false"
    | <IDENTIFIER>
    | "this"
    | LOOKAHEAD(2)
      "new" "int" "[" Exp() "]"
    | "new" <IDENTIFIER> "(" ")"
    | "!" Exp()
    | "(" Exp() ")"
}

void ExpList(): 
{}
{
   ( Exp() (ExpRest())* )?
}

void ExpRest():
{}
{
    "," Exp()
}